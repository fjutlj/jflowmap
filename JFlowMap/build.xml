<project name="JFlowMap" basedir="." default="build-preloaded">

	<taskdef resource="proguard/ant/task.properties" classpath="tools/proguard.jar" />

	<property file="build.properties"/>

    <property name="app.name" value="JFlowMap"/>
	<property name="path.src" value="src"/>
	<property name="path.classes" value="bin"/>
	<property name="path.lib" value="lib"/>
	<property name="path.build" value="build"/>
	<property name="mainclass" value="jflowmap.FlowMapMain"/>

    <target name="build-prod">
        <antcall target="_build">
           <param name="mode" value="prod"/>
        </antcall>
        <antcall target="sign"/>
    </target>

   <target name="build-applet">
        <antcall target="_build">
           <param name="mode" value="applet"/>
        </antcall>
        <antcall target="sign"/>
    </target>

   <target name="build-preloaded">
        <antcall target="_build">
            <param name="mainclass" value="jflowmap.FlowMapPreloadedDataMain"/>
            <param name="mode" value="prod"/>
        	<param name="include.data" value="true"/>
        </antcall>
    </target>

	<target name="_build" depends="mkdirs, clean, compile, make-jar, proguard, add-manifest" />

    
	<path id="libs-classpath">
        <fileset dir="${path.lib}">
            <include name="*.jar"/>
        </fileset>
    </path>

	<path id="master-classpath">
        <fileset dir="${path.lib}">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${path.classes}"/>
	</path>

	<target name="mkdirs">
		<mkdir dir="${path.classes}"/>
		<mkdir dir="${path.build}"/>
	</target>

	<target name="compile">
		<javac destdir="${path.classes}" failonerror="true" debug="true" target="1.5">
			<src path="${path.src}"/>
			<classpath refid="master-classpath"/>
		</javac>
		<copy todir="${path.classes}" verbose="true">
			<fileset dir="${path.src}">
		        <include name="**/images/*.*"/>
			</fileset>
        </copy>
	</target>

	<target name="clean">
		<delete includeEmptyDirs="true">
			<fileset dir="${path.classes}">
				<include name="**/*.class"/>
			</fileset>
		</delete>
	</target>
	
	

	<target name="proguard">		
	    <proguard>
	    	<!-- <libraryjar refid="master-classpath"/> -->
	        <libraryjar path="${java.home}/lib/rt.jar"/>
            <injar refid="libs-classpath"/>
            <injar path="${path.build}/${app.name}-no-libs.jar"/>
	    	<outjar path="${path.build}/${app.name}.jar"/>
	    	
	    	<dontwarn filter="javax.annotation.Nullable,javax.annotation.ParametersAreNonnullByDefault"/>
            <dontwarn filter="at.fhjoanneum.cgvis.*,org.eclipse.swt.*,edu.umd.cs.piccolox.swt.*"/>
            <dontwarn filter="javax.jms.*,javax.mail.*,org.apache.lucene.*"/>
	    	
	    	<keep name="org.apache.log4j.FileAppender"/>
	    	<keep name="org.xmlpull.mxp1.MXParserFactory"/>
	    	<keep name="org.xmlpull.v1.builder.xpath.saxpath.com.werken.saxpath.XPathReader"/>
	    	<keep name="jflowmap.FlowTimelineApplet"/>
	    	<keep name="jflowmap.FlowMapApplet"/>

            <!--keep extends="JApplet"/ -->

	      -dontoptimize
            	
	      -dontobfuscate
	    	
	      -ignorewarnings
	    	
	      -keepclasseswithmembers public class * {
	          public static void main(java.lang.String[]);
	      }
	    	
          -keepclassmembers public class org.apache.log4j.* { *** get*(); boolean is*(); void set*(***); }
	    </proguard>
	</target>

   <target name="make-jar">
        <copy file="log4j-${mode}.properties" tofile="${path.build}/log4j.properties" overwrite="true"/>
        <jar basedir="." jarfile="${path.build}/${app.name}-no-libs.jar">
            <exclude name="**/*" />
            <fileset dir="${path.classes}">
                <include name="**/*.class"/>
                <exclude name="**/*Test.class"/>
                <exclude name="**/*Test$*.class"/>
                <include name="**/res/*.*"/>
                <include name="**/images/*.*"/>
            </fileset>
            <fileset dir="${path.build}">
                <include name="log4j.properties"/>
            </fileset>
            <fileset dir=".">
                <include name="license.txt"/>
            	<selector if="include.data">
        		    <filename name="data/**/*.*"/>
            	</selector>
            	<!--
                <include name="data/**/*.*"/>
                <exclude name="data/refugees-eu/*.*"/>
                <exclude name="data/refugees-one-region/*.*"/>
            	<include name="data/refugees/refugees_1975-2008.xml.gz"/>
            	<include name="data/refugees/regions.xml"/>
                -->
            </fileset>
        </jar>
        <delete file="${path.build}/log4j.properties" quiet="true"/>
    </target>

	<target name="add-manifest">
		<move file="${path.build}/${app.name}.jar" tofile="${path.build}/_${app.name}.jar"/>
		<jar basedir="." jarfile="${path.build}/${app.name}.jar">
            <manifest>
                <attribute name="Main-Class" value="${mainclass}" />
            </manifest>
			<exclude name="**/*" />
			<zipgroupfileset file="${path.build}/_${app.name}.jar"/>
		</jar>
		<delete file="${path.build}/_${app.name}.jar"/>
	</target>
		
	<target name="make-jar-with-libs" depends="make-jar">
		<jar basedir="." jarfile="${path.build}/${app.name}.jar">
			<manifest>
				<attribute name="Main-Class" value="jflowmap.FlowMapMain" />
			</manifest>
            <exclude name="**/*" />
			<zipgroupfileset dir=".">
				<include name="${path.lib}/**/*.jar"/>
				<include name="${path.build}/${app.name}-no-libs.jar"/>
				<!--
				<exclude name="CopyLibs/*.jar"/>
				<exclude name="junit*.jar"/>
				<exclude name="beans-binding/*.jar"/>
				-->
			</zipgroupfileset>
		</jar>
		<delete file="${path.build}/log4j.properties" quiet="true"/>
	</target>

    <target name="sign">
    	<!-- To create a certificate: keytool -genkey -alias jflowmap -->
        <exec executable="jarsigner">
            <!-- <arg line="-keystore ${sign.keystore.name}"/> -->
            <arg line="-storepass ${sign.keystore.pass}"/>
            <arg line="${path.build}/${app.name}.jar"/>
            <arg line="${app.name}"/>
        </exec>
    </target>

</project>

